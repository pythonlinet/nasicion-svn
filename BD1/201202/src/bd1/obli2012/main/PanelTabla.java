/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package bd1.obli2012.main;

import bd1.obli2012.framework.Attribute;
import bd1.obli2012.framework.DatabaseManager;
import bd1.obli2012.framework.Table;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author guillermo
 */
public class PanelTabla extends javax.swing.JPanel {

    private DefaultTableModel tableModel;
    private String dbName;
    private String tbName;

    /**
     * Creates new form TablePanel
     */
    public PanelTabla(String dbName, String tbName, MainFrame parent) {
        this.dbName = dbName;
        this.tbName = tbName;
        initComponents();
        cargarInformacionTabla();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaAtributos = new javax.swing.JTable();
        btnAgregarAttr = new javax.swing.JButton();
        btnEditarAttr = new javax.swing.JButton();
        btnQuitarAttr1 = new javax.swing.JButton();

        tablaAtributos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Tipo dato", "Valor por Defecto", "Not Null", "Primary Key", "Foreign Key", "Reference"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.String.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaAtributos);

        btnAgregarAttr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bd1/obli2012/icons/buttons/add.png"))); // NOI18N
        btnAgregarAttr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarAttrActionPerformed(evt);
            }
        });

        btnEditarAttr.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bd1/obli2012/icons/buttons/edit.png"))); // NOI18N
        btnEditarAttr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarAttrActionPerformed(evt);
            }
        });

        btnQuitarAttr1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bd1/obli2012/icons/buttons/delete.png"))); // NOI18N
        btnQuitarAttr1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarAttr1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 872, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnQuitarAttr1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAgregarAttr, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditarAttr, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnAgregarAttr, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditarAttr, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnQuitarAttr1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 25, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarAttrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarAttrActionPerformed
        DialogAddAttrib j = new DialogAddAttrib(null, true, dbName, tbName, this);
        j.setVisible(true);
        //DialogoAgregarAtributo addAttrib = new DialogoAgregarAtributo(dbName, tbName, this, true);
        //addAttrib.setVisible(true);
        
    }//GEN-LAST:event_btnAgregarAttrActionPerformed

    private void btnEditarAttrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarAttrActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnEditarAttrActionPerformed

    private void btnQuitarAttr1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarAttr1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnQuitarAttr1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregarAttr;
    private javax.swing.JButton btnEditarAttr;
    private javax.swing.JButton btnQuitarAttr1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaAtributos;
    // End of variables declaration//GEN-END:variables

    /**
     * Carga los datos de la tabla seleccionada en el panel
     *
     * @param tabla
     */
    public void cargarInformacionTabla() {
        DefaultTableModel model = (DefaultTableModel)tablaAtributos.getModel();
        
        //vaciar tabla
        while(model.getRowCount() > 0){
            model.removeRow(0);
        }
        /*
         tableModel.addColumn("Nombre");
         tableModel.addColumn("Tipo dato");
         tableModel.addColumn("Valor por Defecto");
         tableModel.addColumn("Nulo?");
         tableModel.addColumn("Primary Key");
         tableModel.addColumn("Foreign Key");
         tableModel.addColumn("Reference");
         */
        Table tabla = DatabaseManager.getInstance().getTable(dbName, tbName);
        for (Attribute a : tabla.getAttributes()) {
            model.addRow(
                    new Object[]{
                        a.getNombre(),
                        a.getTipo(),
                        a.getDefaultValue(),
                        !a.isNullable(),
                        tabla.isPrimaryKey(a.getNombre()),
                        tabla.isForeignKey(a.getNombre()),
                        tabla.reference(a.getNombre())
                    });
        }

    }
}
